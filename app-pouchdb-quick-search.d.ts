/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   app-pouchdb-quick-search.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="pouchdb-quick-search.d.ts" />

/**
 * The `<arc-pouchdb-quick-search>` component uses PouchDB's `quick-search` plugin which is very
 * efficient and accurate full-text search engine built on top of PouchDB.
 * Analyzes text, indexes it, and provides a simple but powerful API for querying.
 * Ideal for PhoneGap apps or any webapp that needs offline search support.
 *
 * Full docs: https://github.com/nolanlawson/pouchdb-quick-search
 *
 * Note: At first run call to `<arc-pouchdb-quick-search>.refresh()` function may be very slow. At the
 * time the index has to be built up. To manually trigger index build (e.g. while the app is iddle)
 * set `buildIndex` attribute without `query` attribute. It will automatically call index build. It must
 * be called each time the documents list change.
 *
 * When index (a cobination of fields) is not needed anymore it can be deleted by setting `destroy`
 * attribute.
 *
 * This element will not perform search automatically after setting required attributes.
 * To perform the query you must call `refresh()` manually. After successful query the `data` event
 * will be fired containing desired results.
 *
 * It should always handle errors by listening for `error` event.
 *
 * ## initialize
 * You must set the `adapter` and `dbName` attributes to initialize the database.
 *
 * ## Querying
 * To perform a simplest query set the `fields` and `query` attributes. `fields` is the key generated
 * internally by **pouchdb-quick-search** plugin and is independed on IndexedDB keys.
 * To perform a query call the `refresh()` function. As a result the element will set a `data`
 * attribute with the query result and fire `data` event with the `result` property in it's detail
 * object.
 *
 * ```
 * <arc-pouchdb-quick-search
 *   id="q"
 *   query="donkey kong"
 *   fields='["title", "description"]'></arc-pouchdb-quick-search>
 * ...
 * this.$.q.refresh();
 * ```
 * ### Response
 * The results contain a list of matching document ids and scores, sorted from high to low.
 * ```
 * { rows:
 *    [
 *      { id: 'mydoc5', score: 0.08027856564851082 },
 *      { id: 'mydoc3', score: 0.044194173824159216 },
 *      { id: 'mydoc4', score: 0.044194173824159216 }
 *    ],
 *   total_rows: 3
 * }
 * ```
 * Score is the accuracy of the result calculated by the underlaying
 * [linr.js library](https://github.com/olivernn/lunr.js).
 *
 * The `total_rows` property will contain a number of all matched document. It can be usefull with
 * pagination to present number of pages.
 *
 * ## Querying full docs
 * To receive full docs from the datastore while querying it set the `includeDocs` attribute:
 * ```
 * <arc-pouchdb-quick-search
 *   id="q"
 *   query="donkey kong"
 *   fields='["title", "description"]'
 *   include-docs></arc-pouchdb-quick-search>
 * ...
 * this.$.q.refresh();
 * ```
 * ### Response
 * ```
 * {
 *   "rows": [
 *     {
 *       "doc": {
 *         "_id": "mydoc5",
 *         "_rev": "1-5252b7faa1062e74ef0881fc908274cd",
 *         "text": "This kong likes to surf!",
 *         "title": "Funky Kong"
 *       },
 *       "id": "mydoc5",
 *       "score": 0.08027856564851082
 *     },
 *     {
 *       "doc": {
 *         "_id": "mydoc3",
 *         "_rev": "1-895f4289f96485c86ab62b02603220ae",
 *         "text": "He's the leader of the bunch, you know him well.",
 *         "title": "Donkey Kong"
 *       },
 *       "id": "mydoc3",
 *       "score": 0.044194173824159216
 *     },
 *     {
 *       "doc": {
 *         "_id": "mydoc4",
 *         "_rev": "1-00117a7b1d05df952474206e51ff19a5",
 *         "text": "His coconut gun can fire in spurts.",
 *         "title": "Diddy Kong"
 *       },
 *       "id": "mydoc4",
 *       "score": 0.044194173824159216
 *     }
 *   ],
 *   "total_rows": 3
 * }
 * ```
 * ## Highlighting results
 * By setting a `highlight` attribute the engine will highlight matched words with `<strong></strong>`
 * element. The sorrounding element can be adjusting by setting `highlightingPre` and `highlightingPost`
 * attributes:
 *
 * ```
 * <arc-pouchdb-quick-search
 *   id="q"
 *   query="donkey kong"
 *   fields='["title", "description"]'
 *   include-docs
 *   highlight
 *   highlighting-pre="<mark>"
 *   highlighting-post="</mark>"></arc-pouchdb-quick-search>
 * ...
 * this.$.q.refresh();
 * ```
 * ### Response
 * ```
 * {
 *   "rows": [
 *     {
 *       "highlighting": {
 *         "text": "This <mark>kong</mark> likes to surf!",
 *         "title": "Funky <mark>Kong</mark>"
 *       },
 *       "id": "mydoc5",
 *       "score": 0.08027856564851082
 *     },
 *     {
 *       "highlighting": {
 *         "title": "Donkey <mark>Kong</mark>"
 *       },
 *       "id": "mydoc3",
 *       "score": 0.044194173824159216
 *     },
 *     {
 *       "highlighting": {
 *         "title": "Diddy <mark>Kong</mark>"
 *       },
 *       "id": "mydoc4",
 *       "score": 0.044194173824159216
 *     }
 *   ],
 *   "total_rows": 3
 * }
 * ```
 *
 * ## Pagination
 * See https://github.com/nolanlawson/pouchdb-quick-search#pagination section for more information.
 *
 * ## Manually building index
 * As mentioned, index if the combination of `fields` attribute. The `language` property of the
 * `pouchdb-quick-search` is not yet supported. Also, index is created automatically during first query
 * if it wasn't created earlier. It may take a while depending on the machine speed and number of data
 * to index. In some cases it may be benefitial for the user to perform manual index update for example
 * the the app is iddle. Another use case is while upgrading the app and during upgrade to new structure
 * it will also create an index.
 *
 * It is required to provide at least the `fields` attribute. When both `fields` and `buildIndex`
 * attributes are set it will perform this task automatically. When ready the `index-updated` event
 * will be fired.
 *
 * ## Deleting an index
 * Similar to creating an index it is possible to destroy the index if it won't be used anymore.
 * To do so at least the `fields` attribute must be ste along with `destroy` attribute. The action
 * will be performed automatically and `index-deleted` event will be fired when finished.
 *
 * ## Changes in 2.0
 *
 * Pouch DB is not included by default and must be added when using this plugin.
 * Include PouchDB before including this plugin.
 */
declare class AppPouchdbQuickSearch extends Polymer.Element {

  /**
   * A search term.
   * By default the engine searches for all words set to the `query` property
   * and all of them must appear in the document in order to be
   * included into the results. You can controll this behavior by
   * setting up `minimumMatch` attribute.
   */
  query: string|null|undefined;

  /**
   * A list of fields to be search. Use dots to separate deeply nested fields.
   *
   * Example:
   *
   * ```
   * ['title', 'description']
   * ```
   *
   * Each filed can have additional parameter which may boost the score.
   * In this case the `fields` parameter must be an object.
   *
   * Example :
   *
   * ```
   * fields: {
   *  title: 5,
   *  description: 1
   * }
   * ```
   *
   * The default boost is 1.
   *
   * The `fields` attribute represents an index created by the plugin.
   * A combination of field names in the array is a single key.
   * The app can create many keys and remove it when nescesary. Keys are
   * independed on database keys.
   */
  fields: any[]|null|undefined;

  /**
   * If set the query result will include full documents. If not set it will only
   * return an `_id` and the probability score.
   */
  includeDocs: boolean|null|undefined;

  /**
   * If set it adds a `<strong></strong>` tag around matched text.
   * You can controll tags by setting `highlightingPre` and `highlightingPost`
   * attributes.
   */
  highlighting: boolean|null|undefined;

  /**
   * To be used with `highlighting`. A tag to be inserted before matched text.
   * For example: `<em>` will result wilt `<em>sometext
   */
  highlightingPre: string|null|undefined;

  /**
   * To be used with `highlighting`. A tag to be inserted after matched text.
   * For example: `</em>` will result wilt `sometext</em>`
   */
  highlightingPost: string|null|undefined;

  /**
   * Used with pagination. Number of records in the response.
   */
  limit: number|null|undefined;

  /**
   * Number of skipped records. The same as `offet`.
   */
  skip: number|null|undefined;

  /**
   * Every term in a query other than stopwords must appear somewhere in
   * the document in order for it to be matched. This can be changed my relaxing `minimumMatch`
   * attribute. The default is `100` which means that all words in the query must appear
   * in the document in order to be matched.
   *
   * To relax this policy consifer following example:
   * ```
   * <arc-pouchdb-quick-search
   *  query="donkey kong"
   *  fields='["title", "description"]'
   *  minimum-match="50"></arc-pouchdb-quick-search>
   * ```
   * It means that the docs must contain either of the terms 'donkey' and 'kong'.
   *
   * In example below the docs must contain at least one of the three terms
   * 'donkey', 'kong', and 'country':
   * ```
   * <arc-pouchdb-quick-search
   *  query="donkey kong country"
   *  fields='["title", "description"]'
   *  minimum-match="33%"></arc-pouchdb-quick-search>
   * ```
   * Notice use of `%`. This value can be either numeric or percentage.
   */
  minimumMatch: number|null|undefined;

  /**
   * To index a subset of documents, include a filter function that tells which documents
   * to skip. The filter function should return true for documents that should be index,
   * and false for documents to skip. (Truthy/falsy values are also okay.)
   * ### Example:
   * ```
   * <arc-pouchdb-quick-search id="q">
   * </arc-pouchdb-quick-search>
   * ...
   * this.$.q.filter =
   *  (doc) => doc.type === 'person'; // only index persons
   * ```
   */
  filter: object|null|undefined;

  /**
   * If set without `query` attribute it will trigger index build.
   */
  buildIndex: boolean|null|undefined;

  /**
   * When set it will remove current index (the `fileds` attribute)
   */
  destroy: boolean|null|undefined;

  /**
   * The results of the query, if any.
   */
  readonly data: any[]|null|undefined;

  /**
   * When the search is performed, a persistent map/reduce index is created behind the scenes
   * in order to save the indexed data and provide the fastest possible queries. This means
   * that the stale options can be used, as in the `query()` API, to get faster but less
   * accurate results.
   *
   * See https://pouchdb.com/api.html#query_database for more information.
   *
   * It can be one of:
   *   * unspecified (default): Returns the latest results, waiting for
   *     the view to build if necessary.
   *   * `ok`: Returns results immediately, even if they’re out-of-date.
   *   * `update_after`: Returns results immediately, but kicks off a build afterwards
   */
  stale: string|null|undefined;

  /**
   * The PouchDB adapter to use. For more information on PouchDB adapters,
   * please refer to the PouchDB documentation
   * [here](https://pouchdb.com/api.html#create_database).
   */
  adapter: string|null|undefined;

  /**
   * The name of the database. This can be either a local database (such
   * as "cats"), or a remote one (e.g., "https://example.com:5678/cats").
   */
  dbName: string|null|undefined;

  /**
   * The number of document revisions to keep track of. The default value
   * (0) indicates no limit.
   */
  revsLimit: number|null|undefined;

  /**
   * A reference to the PouchDB database instance that has been created.
   */
  readonly db: object|null|undefined;
  _destroyChanged(destroy: any, fields: any): void;
  _buildIndexChanged(buildIndex: any, fields: any): void;

  /**
   * Refreshes the results.
   * This function must be called manually and the engine will not query database without colling
   * this function.
   */
  refresh(): void;
  _error(cause: any): void;

  /**
   * Builds a query options object to be passed to the `db.search()` function.
   * This function will not check for missing options or wrong configuration of options.
   */
  _buildQueryOptions(): any;

  /**
   * Deletes the index as a combination of `fileds` attribute.
   * Further call to `refresh()` will rebuild the index automatically but it will take some time.
   *
   * This function will be called automatically when `destroy` and `fields` attributes are set.
   * It will fire `index-deleted` event when the index has been updated or `error` in case of
   * error.
   */
  destroyIndex(): void;

  /**
   * Manually builds an index.
   * This function will be called automatically when `buildIndex` and `fields` attributes are set.
   * It will fire `index-updated` event when the index has been updated or `error` in case of
   * error.
   */
  build(): void;
}

interface HTMLElementTagNameMap {
  "app-pouchdb-quick-search": AppPouchdbQuickSearch;
}
